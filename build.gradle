plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

// from Nether's Delight Refabricated
sourceSets.main.resources {
	srcDirs += 'src/generated/resources'
}

repositories {
	maven {
		name = "Greenhouse Maven"
		url = "https://maven.greenhouseteam.dev/releases/"
	} // Farmer's Delight Refabricated
	maven { url "https://mvn.devos.one/releases/" } // Porting Lib
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content { includeGroup "com.jamieswhiteshirt" }
    } // Reach Entity Attributes (Required by Porting Lib)
    maven {
        url "https://jitpack.io/"
        content { excludeGroup "io.github.fabricators_of_create" }
    } // Fabric ASM

	maven {
		url "https://www.cursemaven.com"
		content { includeGroup "curse.maven" }
	}  // Curseforge
}

//fabricApi {
//	configureDataGeneration()
//}

// 不知道为什么，在有 porting-lib 的情况下用默认的 datagen 会报错：Missing loottable
loom {
	runs {
		datagen {
			client()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=middleearthdelight"
			vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation("vectorwing:FarmersDelight:${fdrf_version}") { exclude(group: "net.fabricmc") }
	modImplementation "curse.maven:middleearth-${me_project}:${me_file}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}